- increase test coverage.
   - test Encrypted+non-encrypted cases
   - test all the operator x= cases.
   - test all string combinations
- Add missing math.h functions (see SHEMath.cpp).
   - SHEFp j0(const SHEFp &a) { return a; }
   - SHEFp j1(const SHEFp &a) { return a; }
   - SHEFp jn(const SHEInt &n, const SHEFp &a) { return a; }
   - SHEFp lgamma(const SHEFp &a) { return a; }
   - //SHEFp nan(const char *) { return a; }
   - SHEFp tgamma(const SHEFp &a) { return a; }
   - SHEFp y0(const SHEFp &a) { return a; }
   - SHEFp y1(const SHEFp &a) { return a; }
   - SHEFp yn(const SHEInt &n, const SHEFp &a) { return a; }
- Add Unordered_map:
  - a version that stores the components unencrypted, but are retrieved
    encrypted.
- Add rounding controlled by fp rounding preferences
- Performance improvements
   - Improve FP performance by switching from offset to native exp, and
     tracking nan and inf status with separate bools.
   - add intermediate tables to trig functions using the same method we used
     to improve log performance
   - put in polynomial based implementations for sqrt and cbrt.
   - replace taylor polynomials with Chebychev polynomials.
   - create non-normalized versions of addition and multiplication for use
     in SHEMath.h, then normalize at the end.
   - Create 3, 4, 5, and 6 variable versions of needRecrypt, verifyArgs, and
     reCrypt.
   - handle more unencrypted length cases in SHEString.cpp
   - can we speed up udiv?
- Add Vector operations
   - use slots in SHEInt to intialize it with a vector.
   - disable packed recrypt when using vectors. (Question does the underlying
     binArithmn (in HElib) add/multiply use packed slots as well?)
   - export SHEInt as vectors.
   - Add vector support to SHEFp (same plan as SHEInt)
   - Add vector support to SHEString
- Create detailed documentation on each function
- Complete the GenericContext code
- Add Support for non-binary BGV contexts
- Add Support for CVV
